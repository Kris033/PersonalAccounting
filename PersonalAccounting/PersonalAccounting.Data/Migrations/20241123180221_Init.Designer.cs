// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonalAccounting.Data;

#nullable disable

namespace PersonalAccounting.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241123180221_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.TagThinkRelation", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ThinkId")
                        .HasColumnType("uuid");

                    b.HasKey("TagId", "ThinkId");

                    b.HasIndex("ThinkId");

                    b.ToTable("TagThinkRelation");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.TelegramUserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("SessionId");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("TelegramUserSession");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.ThinkAccountPlanned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ThinkAccountPlanned");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.ThinkSample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TypeOperation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ThinkSample");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTimeRegister")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeTokenExpired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(311)
                        .HasColumnType("character varying(311)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("TypeAccount")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.UserBalance", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.HasKey("UserId");

                    b.ToTable("UserBalance");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.UserBalanceOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BalanceUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ChangeAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReasonChange")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("BalanceUserId");

                    b.ToTable("UserBalanceOperation");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.Tag", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.User", "User")
                        .WithMany("TagsCreated")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.TagThinkRelation", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.Tag", "Tag")
                        .WithMany("Thinks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalAccounting.Data.Core.Models.ThinkAccountPlanned", "Think")
                        .WithMany("Tags")
                        .HasForeignKey("ThinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Think");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.TelegramUserSession", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.User", "User")
                        .WithMany("TelegramUserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.ThinkAccountPlanned", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.User", "User")
                        .WithMany("ThinkAccountPlanneds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.ThinkSample", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.User", "Author")
                        .WithMany("ThinkSamples")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.UserBalance", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.User", "User")
                        .WithOne("UserBalance")
                        .HasForeignKey("PersonalAccounting.Data.Core.Models.UserBalance", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.UserBalanceOperation", b =>
                {
                    b.HasOne("PersonalAccounting.Data.Core.Models.UserBalance", "UserBalance")
                        .WithMany("Operations")
                        .HasForeignKey("BalanceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBalance");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.Tag", b =>
                {
                    b.Navigation("Thinks");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.ThinkAccountPlanned", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.User", b =>
                {
                    b.Navigation("TagsCreated");

                    b.Navigation("TelegramUserSessions");

                    b.Navigation("ThinkAccountPlanneds");

                    b.Navigation("ThinkSamples");

                    b.Navigation("UserBalance")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalAccounting.Data.Core.Models.UserBalance", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
